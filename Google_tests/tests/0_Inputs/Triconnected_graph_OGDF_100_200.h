//
// Created by Nicolas Lantos on 03/04/2021.
//

#ifndef COMMA_PROJECT_TRICONNECTED_GRAPH_OGDF_HUNDRED_H
#define COMMA_PROJECT_TRICONNECTED_GRAPH_OGDF_HUNDRED_H

#include "gtest/gtest.h"
#include "../../../../CoMMA_lib/Dual_Graph.h"

class Triconnected_graph_OGDF_100_200 : public ::testing::Test {

protected:

    Triconnected_graph *g;
    int nb_nodes;
    int nb_edges;
    vector<long> v_row_ptr;
    vector<long> v_col_ind;
    vector<double> v_values;

    virtual void SetUp() {

        v_row_ptr = {0, 7, 11, 18, 27, 32, 37, 46, 52, 56, 61, 66, 73,
                     79, 83, 85, 90, 94, 99, 108, 112, 116, 121, 126, 130, 134,
                     138, 142, 148, 151, 155, 157, 163, 166, 168, 174, 178, 184, 191,
                     194, 196, 200, 205, 207, 212, 213, 216, 221, 226, 228, 234, 238,
                     241, 245, 248, 252, 257, 261, 264, 269, 271, 275, 279, 283, 285,
                     286, 287, 291, 294, 298, 301, 306, 308, 310, 318, 324, 325, 328,
                     330, 335, 338, 342, 346, 349, 352, 354, 357, 360, 362, 366, 373,
                     375, 380, 381, 384, 387, 391, 394, 397, 398, 400};
        v_col_ind = {1, 2, 23, 43, 47, 58, 67, 0, 6, 48, 52, 0, 3, 4, 5, 7, 25,
                     49, 2, 5, 13, 22, 30, 37, 40, 55, 79, 2, 8, 29, 82, 89, 2, 3,
                     20, 22, 40, 1, 10, 11, 12, 14, 30, 45, 54, 56, 2, 9, 21, 50, 73,
                     81, 4, 27, 35, 83, 7, 11, 18, 29, 37, 6, 24, 39, 74, 91, 6, 9,
                     16, 17, 19, 35, 46, 6, 15, 26, 41, 44, 49, 3, 28, 43, 71, 6, 23,
                     12, 31, 36, 50, 95, 11, 42, 55, 85, 11, 29, 38, 94, 97, 9, 23, 26,
                     38, 41, 49, 66, 79, 96, 11, 55, 65, 82, 5, 57, 61, 74, 7, 38, 59,
                     63, 89, 3, 5, 25, 34, 69, 0, 14, 18, 46, 10, 45, 48, 71, 2, 22,
                     40, 87, 12, 18, 93, 96, 8, 32, 53, 69, 73, 80, 13, 49, 53, 4, 9,
                     17, 58, 3, 6, 15, 33, 37, 43, 47, 95, 27, 54, 62, 31, 81, 22, 60,
                     64, 72, 76, 86, 8, 11, 39, 77, 15, 61, 68, 73, 85, 97, 3, 9, 31,
                     46, 68, 75, 90, 17, 18, 21, 10, 35, 3, 5, 25, 90, 12, 18, 51, 55,
                     91, 16, 56, 0, 13, 31, 61, 66, 12, 6, 24, 89, 11, 23, 37, 49, 60,
                     0, 31, 78, 89, 91, 1, 24, 2, 12, 18, 28, 46, 97, 7, 15, 69, 89,
                     41, 56, 73, 1, 66, 74, 88, 27, 28, 78, 6, 32, 81, 94, 3, 16, 19,
                     41, 73, 6, 42, 51, 61, 20, 67, 78, 0, 29, 76, 86, 94, 21, 80, 34,
                     46, 93, 99, 20, 36, 43, 56, 32, 66, 70, 86, 21, 76, 34, 19, 18, 43,
                     52, 62, 0, 57, 74, 36, 37, 73, 92, 22, 27, 50, 62, 74, 84, 93, 96,
                     13, 24, 34, 91, 7, 27, 36, 51, 55, 68, 88, 98, 10, 20, 52, 67, 70,
                     83, 37, 34, 58, 63, 35, 84, 47, 53, 57, 80, 81, 3, 18, 95, 27, 59,
                     78, 83, 7, 33, 54, 78, 4, 19, 85, 8, 74, 80, 70, 77, 16, 36, 82,
                     34, 58, 62, 25, 91, 52, 73, 89, 95, 4, 21, 45, 47, 50, 88, 99, 37,
                     40, 10, 41, 47, 72, 87, 68, 26, 60, 70, 17, 54, 58, 15, 31, 79, 88,
                     18, 26, 70, 17, 36, 49, 73, 60, 89};

        v_values = {1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
                    1., 1., 1., 1., 1., 1., 1., 1., 1.};

        nb_nodes = 100;
        nb_edges = 200;

        g = new Triconnected_graph(v_row_ptr,
                                   v_col_ind,
                                   v_values);

    }

    virtual void TearDown() {
        delete g;
    }
};

#endif //COMMA_PROJECT_TRICONNECTED_GRAPH_OGDF_HUNDRED_H
