# Prevent duplicated pipeline by removing MR pipelines # We leave it so that the pipeline badge is good
#workflow:
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#      when: never
#    - when: always
variables:
  GIT_STRATEGY: none # Do nothing by default. It will be done once in init, then other we reuse it
  GIT_SUBMODULE_STRATEGY: none

#Common to all stages
default:
  tags: # Use shell instead of submitting pipeline to slurm
    - shell
  before_script:
    # Load python version, compilers
    - source /stck/rmilani/GitLab_CI_envs/CoMMA_env_el7.sh  # Centos7
    #- source /stck/rmilani/GitLab_CI_envs/CoMMA_env.sh  # Centos8

stages:
    - init
    - build
    - test
    - documentation

job:init:
    stage: init
    variables:
        GIT_STRATEGY: clone
        GIT_SUBMODULE_STRATEGY: none # Do it manually to avoid some unused submodules
    before_script:
        - module purge
        # Load python version, compilers
        - source /stck/rmilani/GitLab_CI_envs/CoMMA_env_el7.sh
        - python3 -c "import gcovr" || python3 -m pip install --user gcovr
    only:
        changes:
            - CoMMA_lib/*.{cpp,h}
            - tests/**/*.{cpp,h}
            - CMakeLists.txt
            - .gitlab-ci.yml
            - Documentation/Doxyfile
    script:
        # Set a commun directory and make it available, Create it at the root dir, so that it is found
        # See https://docs.gitlab.com/ee/ci/variables/#pass-an-environment-variable-to-another-job
        - echo "CUSTOM_CI_DIR=$PWD" >> build.env
        # We do it manually since there is also perfetto which, however, is not used
        - git submodule update --init --depth 5 Catch2
        - git submodule update --init --depth 5 pybind11
    artifacts:
        reports:
            dotenv: ./build.env

CoMMA:
    stage: build
    needs: ['job:init']
    only:
        changes:
            - CoMMA_lib/*.{cpp,h}
            - tests/**/*.{cpp,h}
            - CMakeLists.txt
            - .gitlab-ci.yml
            - Documentation/Doxyfile
    script:
        - cd $CUSTOM_CI_DIR
        - mkdir -p build
        - cd build
        - cmake -DCODAFLAGS=On ..
        - make -j
    #artifacts:
    #    expire_in: 1 month
    #    paths:
    #        # The path is taken from the initial directory, hence we specify the full path
    #        - $CUSTOM_CI_DIR/build
test_a:
    stage: test
    needs: ['job:init', CoMMA]
    only:
        changes:
            - CoMMA_lib/*.{cpp,h}
            - tests/**/*.{cpp,h}
            - CMakeLists.txt
            - .gitlab-ci.yml
    script:
        - cd $CUSTOM_CI_DIR
        - cd build
        - ./Comma_test -r junit > test_a.xml
        - python3 -m gcovr --xml-pretty --exclude '\.\./pybind11/' --exclude '\.\./Catch2/' --print-summary -o coverage.xml --root ..
    coverage: /^\s*lines:\s*\d+.\d+\%/
    artifacts:
        expire_in: 1 month
        reports:
            # The path is taken from the initial directory, hence we specify the full path
            junit: $CUSTOM_CI_DIR/build/test_a.xml
            coverage_report:
                coverage_format: cobertura
                path: $CUSTOM_CI_DIR/build/coverage.xml
pages:
    stage: documentation
    needs: ['job:init'] #job:init is needed to get dotenv artifacts
    script:
        - export cur_dir=$PWD
        - cd $CUSTOM_CI_DIR
        - doxygen Documentation/Doxyfile
        - cp -r documentation/html/ ${cur_dir}/public/
    artifacts:
        expire_in: 1 month
        paths:
            - ./public
    rules:
        - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
          changes:
            - CoMMA_lib/*.{cpp,h,md}
            - .gitlab-ci.yml
            - Documentation/Doxyfile






