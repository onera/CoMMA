# Prevent duplicated pipeline by removing MR pipelines # We leave it so that the pipeline badge is good
#workflow:
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#      when: never
#    - when: always
# Check out also this one https://stackoverflow.com/questions/69812129/gitlab-ci-if-mr-exist-just-trigger-merge-request-detach-pipeline-if-not-trigge/69819558#69819558
# Triggers on merge resuests, branch pipelines UNLESS there is an open merge requests
workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

variables:
  GIT_STRATEGY: none # Do nothing by default. It will be done once in init, then other we reuse it
  GIT_SUBMODULE_STRATEGY: none
 # SCHEDULER_PARAMETERS: "--clusters c1 --qos=c1_test_giga --ntasks=1 --time=00:15:00" # Attention c1 is DAAA partition, hence this works only with DAAA users

#Common to all stages
default:
  tags: # Use shell instead of submitting pipeline to slurm
    - shell
  #  - slurm
  before_script:
    - module purge
    # Load python version, compilers
    - source /stck/rmilani/GitLab_CI_envs/CoMMA_env.sh
    # Adding installed pybind11 to CMAKE_PREFIX_PATH (it has been installed with pip)
    - export CMAKE_PREFIX_PATH=/stck/rmilani/.local/lib/python3.10/site-packages/pybind11:$CMAKE_PREFIX_PATH
    # Adding installed Catch2 to CMAKE_PREFIX_PATH
    - export CMAKE_PREFIX_PATH=/stck/rmilani/opt/Catch2/install:$CMAKE_PREFIX_PATH

stages:
    - init
    - configure
    - build
    - test
    - lint_format
    - lint_format_python
    - documentation

.rules_changes_anything:
    rules:
        - changes:
            - include/CoMMA/*.{h,md}
            - src/*.cpp
            - tests/*.{cpp,h}
            - CMakeLists.txt
            - .gitlab-ci.yml
            - Documentation/Doxyfile
            - .clang-format
            - .clang-tidy
            - examples/scripts/*.py
            - examples/scripts/pyproject.toml
            - config_files/*

.rules_changes_sources:
    rules:
        - changes:
            - include/CoMMA/*.h
            - src/*.cpp
            - tests/*.{cpp,h}
            - CMakeLists.txt
            - .gitlab-ci.yml
            - config_files/*

.rules_changes_sources_linting:
    rules:
        - changes:
            - include/CoMMA/*.h
            - src/*.cpp
            - tests/*.{cpp,h}
            - CMakeLists.txt
            - .gitlab-ci.yml
            - .clang-format
            - .clang-tidy
            - config_files/*

.rules_changes_python:
    rules:
        - changes:
            - examples/scripts/*.py
            - examples/scripts/pyproject.toml
            - config_files/*

job:init:
    stage: init
    variables:
        GIT_STRATEGY: clone
        # GIT_SUBMODULE_STRATEGY: none # Do it manually to avoid some unused submodules # Superseded
    rules:
        - !reference [.rules_changes_anything, rules]
    script:
        # Set a commun directory and make it available, Create it at the root dir, so that it is found
        # See https://docs.gitlab.com/ee/ci/variables/#pass-an-environment-variable-to-another-job
        - echo "CUSTOM_CI_DIR=$PWD" >> build.env
        - echo "INSTALL_DIR=\$CUSTOM_CI_DIR/install" >> build.env
        - echo "PYTHON_DIR=\$CUSTOM_CI_DIR/examples/scripts" >> build.env
        # Ensure that everything from previous CI is cleaned
        - rm -rf build* install
        # See if python tools are installed (here, we have already sourced the env,
        # see default:before_script, so it's OK
        - python3 -c "import gcovr" || python3 -m pip install --user gcovr
        - python3 -m black --version || python3 -m pip install --user black
        - python3 -m isort --version || python3 -m pip install --user isort
        - python3 -m ruff --version || python3 -m pip install --user ruff
        - python3 -m pytest --version || python3 -m pip install --user pytest
    artifacts:
        reports:
            dotenv: ./build.env

job:configure_dbg:
    stage: configure
    needs: ['job:init']
    rules:
        - !reference [.rules_changes_sources_linting, rules]
    script:
        - cd $CUSTOM_CI_DIR
        - mkdir -p build
        - cd build
        - cmake -DCODAFLAGS=On -DCOVERAGE=On -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} ..

job:build_dbg:
    stage: build
    # We need job:init artifacts so leave it
    needs: ['job:init', 'job:configure_dbg']
    rules:
        - !reference [.rules_changes_sources_linting, rules]
    script:
        - cd $CUSTOM_CI_DIR/build
        - make -j
        - make install
    #artifacts:
    #    expire_in: 1 month
    #    paths:
    #        # The path is taken from the initial directory, hence we specify the full path
    #        - $CUSTOM_CI_DIR/build
job:test_dbg:
    stage: test
    needs: ['job:init', 'job:build_dbg']
    rules:
        - !reference [.rules_changes_sources, rules]
    script:
        - cd $CUSTOM_CI_DIR/build
        - ./CoMMA_test -r junit > test_a.xml
        - python3 -m gcovr --xml-pretty --exclude '\.\./pybind11/' --exclude '\.\./Catch2/' --exclude '\.\./perfetto/' --exclude '\.\./build_rel.*/' --exclude '\.\./src/CoMMA.cpp' --exclude '\.\./config_files/' --exclude '\.\./misc_scripts/' --print-summary -o coverage.xml --root ..
    coverage: /^\s*lines:\s*\d+.\d+\%/
    artifacts:
        expire_in: 1 month
        reports:
            # The path is taken from the initial directory, hence we specify the full path
            junit: $CUSTOM_CI_DIR/build/test_a.xml
            coverage_report:
                coverage_format: cobertura
                path: $CUSTOM_CI_DIR/build/coverage.xml
job:test_python_dbg:
    stage: test
    needs: ['job:init', 'job:build_dbg']
    rules:
        - !reference [.rules_changes_sources, rules]
    script:
        - pyv=$(python3 --version | awk -F '[ .]' '{print $2"."$3}')
        # equivalent to
        # - pyv=$(python3 -c "import sys;print('{}.{}'.format(sys.version_info[0],sys.version_info[1]))")
        # Add path to CoMMA module to PATH
        - export PYTHONPATH=${INSTALL_DIR}/lib64/python${pyv}/site-packages:$PYTHONPATH
        - export PYTHONPATH=${INSTALL_DIR}/lib/python${pyv}/site-packages:$PYTHONPATH
        - cd ${PYTHON_DIR}
        - python3 -m pytest
job:test_install_pkgconfig:
    stage: test
    needs: ['job:init', 'job:build_dbg']
    rules:
        - changes:
            - include/CoMMA/*.h
            - CMakeLists.txt
            - .gitlab-ci.yml
            - config_files/*.in
    script:
        - cd $CUSTOM_CI_DIR/build
        - g++ ../misc_scripts/test_pkgconfig_compile.cpp -o test_pkgconfig_compile `PKG_CONFIG_PATH=${INSTALL_DIR}/lib64/pkgconfig pkg-config --cflags --libs comma`
job:configure_rel:
    stage: configure
    needs: ['job:init']
    rules:
        - !reference [.rules_changes_sources, rules]
    script:
        - cd $CUSTOM_CI_DIR
        - mkdir -p build_rel
        - cd build_rel
        - cmake -DCODAFLAGS=On -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_PYTHON_BINDINGS=Off ..
job:build_rel:
    stage: build
    needs: ['job:init', 'job:configure_rel']
    rules:
        - !reference [.rules_changes_sources, rules]
    script:
        - cd $CUSTOM_CI_DIR/build_rel
        - make -j
job:test_rel:
    stage: test
    needs: ['job:init', 'job:build_rel']
    rules:
        - !reference [.rules_changes_sources, rules]
    script:
        - cd $CUSTOM_CI_DIR/build_rel
        - ./CoMMA_test
job:configure_rel32:
    stage: configure
    needs: ['job:init']
    rules:
        - !reference [.rules_changes_sources, rules]
    script:
        - cd $CUSTOM_CI_DIR
        - mkdir -p build_rel32
        - cd build_rel32
        - cmake -DCODAFLAGS=On -DCMAKE_BUILD_TYPE=RelWithDebInfo -DINT_T="int32_t" -DINDEX_T="uint32_t" -DBUILD_PYTHON_BINDINGS=Off ..
job:build_rel32:
    stage: build
    needs: ['job:init', 'job:configure_rel32']
    rules:
        - !reference [.rules_changes_sources, rules]
    script:
        - cd $CUSTOM_CI_DIR/build_rel32
        - make -j
job:test_rel32:
    stage: test
    needs: ['job:init', 'job:build_rel32']
    rules:
        - !reference [.rules_changes_sources, rules]
    script:
        - cd $CUSTOM_CI_DIR/build_rel32
        - ./CoMMA_test
job:configure_rel64:
    stage: configure
    needs: ['job:init']
    rules:
        - !reference [.rules_changes_sources, rules]
    script:
        - cd $CUSTOM_CI_DIR
        - mkdir -p build_rel64
        - cd build_rel64
        - cmake -DCODAFLAGS=On -DCMAKE_BUILD_TYPE=RelWithDebInfo -DINT_T="int64_t" -DINDEX_T="uint64_t" -DBUILD_PYTHON_BINDINGS=Off ..
job:build_rel64:
    stage: build
    needs: ['job:init', 'job:configure_rel64']
    rules:
        - !reference [.rules_changes_sources, rules]
    script:
        - cd $CUSTOM_CI_DIR/build_rel64
        - make -j
job:test_rel64:
    stage: test
    needs: ['job:init', 'job:build_rel64']
    rules:
        - !reference [.rules_changes_sources, rules]
    script:
        - cd $CUSTOM_CI_DIR/build_rel64
        - ./CoMMA_test
job:clang_tidy:
    stage: lint_format
    # Need compile_commands
    needs: ['job:init', 'job:configure_dbg']
    rules:
        - !reference [.rules_changes_sources_linting, rules]
    # Select only changed files otherwise too long
    script:
        - cd $CUSTOM_CI_DIR
        - CHANGED_FILES=$(git diff --name-only $CI_COMMIT_BEFORE_SHA $CI_COMMIT_SHA | grep ".*\.\(h\|cpp\)" || true)
        - if [[ ! -z $CHANGED_FILES ]]; then clang-tidy -p build/compile_commands.json --warnings-as-errors="*" $CHANGED_FILES; else echo "Nothing to do"; fi
    allow_failure: true
job:clang_format:
    stage: lint_format
    needs: ['job:init']
    rules:
        - !reference [.rules_changes_sources_linting, rules]
    script:
        - cd $CUSTOM_CI_DIR
        - git ls-tree --name-only -r HEAD include/CoMMA src tests | grep ".*\.\(h\|cpp\)\(\.in\)\?" | xargs /stck/rmilani/.local/bin/clang-format --style=file --dry-run --Werror
    allow_failure: true
job:black:
    stage: lint_format_python
    needs: ['job:init']
    rules:
        - !reference [.rules_changes_python, rules]
    script:
        - cd ${PYTHON_DIR}
        - python3 -m black --check *.py
    allow_failure: true
job:isort:
    stage: lint_format_python
    needs: ['job:init']
    rules:
        - !reference [.rules_changes_python, rules]
    script:
        - cd ${PYTHON_DIR}
        - python3 -m isort --check *.py
    allow_failure: true
job:ruff:
    stage: lint_format_python
    needs: ['job:init']
    rules:
        - !reference [.rules_changes_python, rules]
    script:
        - cd ${PYTHON_DIR}
        - python3 -m ruff check *.py
    allow_failure: true
pages:
    stage: documentation
    needs:
      - job: 'job:init'
      - job: 'job:test_dbg'
        artifacts: false
    script:
        - cd $CUSTOM_CI_DIR
        - rm -rf documentation
        - doxygen Documentation/Doxyfile
        - cd -
        - rm -rf public
        - cp -r ${CUSTOM_CI_DIR}/documentation/html public
    artifacts:
        expire_in: 1 month
        paths:
            - public
    rules:
        - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
          changes:
            - include/CoMMA/*.{h,md}
            - src/*.cpp
            - .gitlab-ci.yml
            - Documentation/Doxyfile
